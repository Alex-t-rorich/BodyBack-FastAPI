"""Initial schema from existing models

Revision ID: 763c6097052b
Revises: 
Create Date: 2025-08-14 11:23:14.834287

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '763c6097052b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('customers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('customers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_customers_trainer_id'), table_name='customers')
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.add_column('qr_codes', sa.Column('user_id', sa.UUID(), nullable=False))
    op.add_column('qr_codes', sa.Column('token', sa.String(length=255), nullable=False))
    op.add_column('qr_codes', sa.Column('status', sa.String(length=20), nullable=False))
    op.add_column('qr_codes', sa.Column('is_used', sa.Boolean(), nullable=False))
    op.add_column('qr_codes', sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('qr_codes', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('qr_codes', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('qr_codes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('qr_codes_qr_token_key'), 'qr_codes', type_='unique')
    op.create_unique_constraint(None, 'qr_codes', ['token'])
    op.drop_constraint(op.f('qr_codes_customer_id_fkey'), 'qr_codes', type_='foreignkey')
    op.create_foreign_key(None, 'qr_codes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('qr_codes', 'customer_id')
    op.drop_column('qr_codes', 'active')
    op.drop_column('qr_codes', 'generated_at')
    op.drop_column('qr_codes', 'qr_token')
    op.add_column('session_tracking', sa.Column('user_id', sa.UUID(), nullable=False))
    op.add_column('session_tracking', sa.Column('qr_code_id', sa.UUID(), nullable=False))
    op.add_column('session_tracking', sa.Column('status', sa.String(length=20), nullable=False))
    op.add_column('session_tracking', sa.Column('scanned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('session_tracking', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('session_tracking', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('session_tracking', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('session_tracking_customer_id_fkey'), 'session_tracking', type_='foreignkey')
    op.drop_constraint(op.f('session_tracking_qr_id_fkey'), 'session_tracking', type_='foreignkey')
    op.drop_constraint(op.f('session_tracking_session_volume_id_fkey'), 'session_tracking', type_='foreignkey')
    op.drop_constraint(op.f('session_tracking_trainer_id_fkey'), 'session_tracking', type_='foreignkey')
    op.create_foreign_key(None, 'session_tracking', 'qr_codes', ['qr_code_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'session_tracking', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('session_tracking', 'session_volume_id')
    op.drop_column('session_tracking', 'qr_id')
    op.drop_column('session_tracking', 'session_date')
    op.drop_column('session_tracking', 'trainer_id')
    op.drop_column('session_tracking', 'customer_id')
    op.drop_column('session_tracking', 'scan_timestamp')
    op.add_column('session_volumes', sa.Column('user_id', sa.UUID(), nullable=False))
    op.add_column('session_volumes', sa.Column('notes', sa.Text(), nullable=True))
    op.alter_column('session_volumes', 'trainer_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('session_volumes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('session_volumes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('session_volumes_customer_id_fkey'), 'session_volumes', type_='foreignkey')
    op.create_foreign_key(None, 'session_volumes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('session_volumes', 'customer_id')
    op.drop_column('session_volumes', 'status')
    op.drop_column('session_volumes', 'period')
    op.drop_column('session_volumes', 'trainer_notes')
    op.alter_column('trainers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('trainers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('user_roles_user_id_fkey'), 'user_roles', type_='foreignkey')
    op.drop_constraint(op.f('user_roles_role_id_fkey'), 'user_roles', type_='foreignkey')
    op.create_foreign_key(None, 'user_roles', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_roles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('users', 'active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('users', 'roles')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('roles', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.create_foreign_key(op.f('user_roles_role_id_fkey'), 'user_roles', 'roles', ['role_id'], ['id'])
    op.create_foreign_key(op.f('user_roles_user_id_fkey'), 'user_roles', 'users', ['user_id'], ['id'])
    op.alter_column('trainers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('trainers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('session_volumes', sa.Column('trainer_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('session_volumes', sa.Column('period', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('session_volumes', sa.Column('status', sa.TEXT(), server_default=sa.text("'draft'::text"), autoincrement=False, nullable=True))
    op.add_column('session_volumes', sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'session_volumes', type_='foreignkey')
    op.create_foreign_key(op.f('session_volumes_customer_id_fkey'), 'session_volumes', 'users', ['customer_id'], ['id'], ondelete='CASCADE')
    op.alter_column('session_volumes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('session_volumes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('session_volumes', 'trainer_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('session_volumes', 'notes')
    op.drop_column('session_volumes', 'user_id')
    op.add_column('session_tracking', sa.Column('scan_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('session_tracking', sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('session_tracking', sa.Column('trainer_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('session_tracking', sa.Column('session_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True))
    op.add_column('session_tracking', sa.Column('qr_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('session_tracking', sa.Column('session_volume_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'session_tracking', type_='foreignkey')
    op.drop_constraint(None, 'session_tracking', type_='foreignkey')
    op.create_foreign_key(op.f('session_tracking_trainer_id_fkey'), 'session_tracking', 'users', ['trainer_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('session_tracking_session_volume_id_fkey'), 'session_tracking', 'session_volumes', ['session_volume_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('session_tracking_qr_id_fkey'), 'session_tracking', 'qr_codes', ['qr_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('session_tracking_customer_id_fkey'), 'session_tracking', 'users', ['customer_id'], ['id'], ondelete='CASCADE')
    op.alter_column('session_tracking', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('session_tracking', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('session_tracking', 'deleted_at')
    op.drop_column('session_tracking', 'scanned_at')
    op.drop_column('session_tracking', 'status')
    op.drop_column('session_tracking', 'qr_code_id')
    op.drop_column('session_tracking', 'user_id')
    op.add_column('qr_codes', sa.Column('qr_token', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False))
    op.add_column('qr_codes', sa.Column('generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('qr_codes', sa.Column('active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('qr_codes', sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'qr_codes', type_='foreignkey')
    op.create_foreign_key(op.f('qr_codes_customer_id_fkey'), 'qr_codes', 'users', ['customer_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'qr_codes', type_='unique')
    op.create_unique_constraint(op.f('qr_codes_qr_token_key'), 'qr_codes', ['qr_token'], postgresql_nulls_not_distinct=False)
    op.alter_column('qr_codes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('qr_codes', 'deleted_at')
    op.drop_column('qr_codes', 'created_at')
    op.drop_column('qr_codes', 'expires_at')
    op.drop_column('qr_codes', 'is_used')
    op.drop_column('qr_codes', 'status')
    op.drop_column('qr_codes', 'token')
    op.drop_column('qr_codes', 'user_id')
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('idx_customers_trainer_id'), 'customers', ['trainer_id'], unique=False)
    op.alter_column('customers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('customers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###
